---
- name: Set up infrastructure on OpenStack
  hosts: localhost
  gather_facts: false
  vars:
    public_network_id: 6832642a-00c0-494c-b513-94c60ee435f1
    nameservers: 10.3.76.2
    key_name: msolberg
    glance_image: rhel-guest-image-7.2-20160302.0
  tasks:
  - os_network:
      name: "fieldmarketing_register-private"
  - os_subnet:
      name: "fieldmarketing_register-private"
      network_name: "fieldmarketing_register-private"
      cidr: 192.168.0.0/24
      gateway_ip: 192.168.0.1
      dns_nameservers: "{{ nameservers }}"
      allocation_pool_start: 192.168.0.50
      allocation_pool_end: 192.168.0.200
  - os_router:
      name: "fieldmarketing_register"
      network: "{{ public_network_id }}"
      interfaces:
        - fieldmarketing_register-private
  - os_port:
      name: web-port
      network: fieldmarketing_register-private
      fixed_ips:
        - ip_address: 192.168.0.100
  - os_server:
      name: "fieldmarketing_register_web"
      state: present
      image: "{{ glance_image }}"
      flavor: m1.small
      key_name: "{{ key_name }}"
      nics:
        - port-name: web-port
      auto_ip: yes
      wait: yes
      meta:
        hostname: web.localdomain
    register: fieldmarketing_register_web
  - os_port:
      name: app-port
      network: fieldmarketing_register-private
      fixed_ips:
        - ip_address: 192.168.0.120
  - os_server:
      name: "fieldmarketing_register_app"
      state: present
      image: "{{ glance_image }}"
      flavor: m1.medium
      key_name: "{{ key_name }}"
      nics:
        - port-name: app-port
      auto_ip: yes
      wait: yes
      meta:
        hostname: app.localdomain
    register: fieldmarketing_register_app
  - os_port:
      name: db-port
      network: fieldmarketing_register-private
      fixed_ips:
        - ip_address: 192.168.0.200
  - os_server:
      name: "fieldmarketing_register_db"
      state: present
      image: "{{ glance_image }}"
      flavor: m1.medium
      key_name: "{{ key_name }}"
      nics:
        - port-name: db-port
      auto_ip: yes
      wait: yes
      meta:
        hostname: db.localdomain
    register: fieldmarketing_register_db

  - name: wait for ssh on web
    command: >
      ssh -o BatchMode=yes -oStrictHostKeyChecking=no
      cloud-user@{{fieldmarketing_register_web.server.public_v4}} true
    register: result
    until: result|success
    retries: 30
    delay: 10
  - name: wait for ssh on app
    command: >
      ssh -o BatchMode=yes -oStrictHostKeyChecking=no
      cloud-user@{{fieldmarketing_register_app.server.public_v4}} true
    register: result
    until: result|success
    retries: 30
    delay: 10
  - name: wait for ssh on db
    command: >
      ssh -o BatchMode=yes -oStrictHostKeyChecking=no
      cloud-user@{{fieldmarketing_register_db.server.public_v4}} true
    register: result
    until: result|success
    retries: 30
    delay: 10
  
  - name: add web server to inventory
    add_host: name=web groups=webservers,provisioned
              ansible_host={{fieldmarketing_register_web.server.public_v4 }}
  - name: add app server to inventory
    add_host: name=app groups=appservers,provisioned
              ansible_host={{fieldmarketing_register_app.server.public_v4 }}
  - name: add db server to inventory
    add_host: name=db groups=dbservers,provisioned
              ansible_host={{fieldmarketing_register_db.server.public_v4 }}
  
- name: Register provisioned systems to Satellite
  hosts: provisioned
  remote_user: cloud-user
  sudo: yes
  vars:
    satellite_fqdn: satellite.example.com
    satellite_org: default
    satellite_key: SOE
  tasks:
    - name: download satellite certs
      yum: name=http://{{ satellite_fqdn }}/pub/katello-ca-consumer-latest.noarch.rpm state=present
    - name: register system
      redhat_subscription: activationkey={{ satellite_key }} org_id={{ satellite_org }}

- name: Configure web servers
  hosts: webservers
  remote_user: cloud-user
  sudo: yes
  tasks:
    - name: ensure haproxy exists
      yum: name=haproxy
    - name: configure haproxy
      template: src=templates/haproxy.cfg.j2 dest=/etc/haproxy/haproxy.cfg mode=0644
    - name: start haproxy
      service: name=haproxy state=started enabled=yes
  handlers:
    - name: restart haproxy
      service: name=haproxy state=restarted
  
- name: Configure app servers
  hosts: appservers
  remote_user: cloud-user
  sudo: yes
  vars:
    satellite_fqdn: satellite.example.com
  tasks:
    - name: install jboss dependencies
      yum: name=unzip,java-1.8.0-openjdk-devel,apr-devel
    - name: download jboss
      unarchive: src=http://{{ satellite_fqdn }}/pub/jboss-eap-7.0.0.zip dest=/opt creates=/opt/jboss-eap-7.0 copy=no
    - name: create symlink
      file: path=/opt/jboss-eap state=link src=/opt/jboss-eap-7.0
    - name: add jboss group
      group: name=jboss
    - name: add jboss user
      user: name=jboss group=jboss home=/opt/jboss-eap
    - name: copy startup script
      command: chdir=/opt/jboss-eap cp bin/init.d/jboss-eap-rhel.sh /etc/init.d/jboss creates=/etc/init.d/jboss
    - name: copy config file
      template: src=templates/jboss-eap.conf.j2 dest=/etc/default/jboss-eap.conf mode=0644
    - name: set ownership of jboss-eap install
      file: path=/opt/jboss-eap/ owner=jboss group=jboss state=directory recurse=yes
    - name: start jboss
      service: name=jboss enabled=yes state=started
    - name: deploy war file
      copy: src=../../target/register.war dest=/opt/jboss-eap-7.0/standalone/deployments/

- name: Configure db servers
  hosts: dbservers
  remote_user: cloud-user
  sudo: yes
  tasks:
    - name: install postgresql
      yum: name=postgresql-server
    - name: initialize postgresql database
      command: postgresql-setup initdb creates=/var/lib/pgsql/initdb.log 
    - name: start postgresql
      service: name=postgresql state=started enabled=yes
